#include "TFT_Draw.h"


int tft_init(u32 TftDeviceId, XTft *InstancePtr) {
	int Status;
	XTft_Config *TftConfigPtr;

	/*
	 * Get address of the XTft_Config structure for the given device id.
	 */
	TftConfigPtr = XTft_LookupConfig(TftDeviceId);
	if (TftConfigPtr == (XTft_Config *) NULL ) {
		return XST_FAILURE;
	}

	/*
	 * Initialize all the TftInstance members and fills the screen with
	 * default background color.
	 */
	Status = XTft_CfgInitialize(InstancePtr, TftConfigPtr,
			TftConfigPtr->BaseAddress);

	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Wait till Vsync(Video address latch) status bit is set before writing
	 * the frame address into the Address Register. This ensures that the
	 * current frame has been displayed and we can display a new frame of
	 * data. Checking the Vsync state ensures that there is no data flicker
	 * when displaying frames in real time though there is some delay due to
	 * polling.
	 */
	while (XTft_GetVsyncStatus(InstancePtr) != XTFT_IESR_VADDRLATCH_STATUS_MASK)
		;

	/*
	 * Change the Video Memory Base Address from default value to
	 * a valid Memory Address and clear the screen.
	 */
	XTft_SetFrameBaseAddr(InstancePtr, TFT_FRAME_ADDR);
	XTft_ClearScreen(InstancePtr);

	xil_printf("Finish initializing TFT\n\r");

	XTft_SetColor(InstancePtr, COLOR_WHITE, COLOR_WHITE);
	XTft_ClearScreen(InstancePtr);

	xil_printf("TFT test completed!\r\n");
	return XST_SUCCESS;
}

static int tft_setPixelSafe(XTft *InstancePtr, u32 colVal, u32 rowVal,
		u32 colour, pthread_mutex_t mutex_sw_tft);

int tft_intialDraw(XTft *InstancePtr) {
	int i, j, stor_X = COL_1_X;
	// Outer green box

	tft_fillRect(InstancePtr, OUTER_COL_START_X, OUTER_COL_START_Y,
			OUTER_COL_END_X, OUTER_COL_END_Y, COLOR_GREEN);
	tft_drawRect(InstancePtr, OUTER_COL_START_X, OUTER_COL_START_Y,
			OUTER_COL_END_X, OUTER_COL_END_Y, COLOR_BLACK);

	// Bar Box
	tft_addBar(InstancePtr, BAR_START_X, BAR_START_Y, BAR_START_X + BAR_LENGTH,
			BAR_START_Y + BAR_HEIGHT);

	// Score (WORD) Box
	tft_drawRect(InstancePtr, SCORE_WORD_BOX_START_X, SCORE_WORD_BOX_START_Y,
			SCORE_WORD_BOX_END_X, SCORE_WORD_BOX_END_Y, COLOR_BLACK);
	tft_fillRect(InstancePtr, SCORE_WORD_BOX_START_X, SCORE_WORD_BOX_START_Y,
			SCORE_WORD_BOX_END_X, SCORE_WORD_BOX_END_Y, COLOR_GREY);
	tft_writeString(InstancePtr, SCORE_WORD_BOX_START_X + 2,
			SCORE_WORD_BOX_START_Y + 7, "Scores", COLOR_BLACK, COLOR_GREY);

	// Score Outer Box
	tft_drawRect(InstancePtr, SCORE_OUTER_BOX_START_X, SCORE_OUTER_BOX_START_Y,
			SCORE_OUTER_BOX_END_X, SCORE_OUTER_BOX_END_Y, COLOR_BLACK);
	tft_fillRect(InstancePtr, SCORE_OUTER_BOX_START_X, SCORE_OUTER_BOX_START_Y,
			SCORE_OUTER_BOX_END_X, SCORE_OUTER_BOX_END_Y, COLOR_GREY);

	// 3 Score Inner Box
	tft_drawRect(InstancePtr, SCORE_BOX1_START_X, SCORE_BOX_START_Y,
			SCORE_BOX1_END_X, SCORE_BOX_END_Y, COLOR_BLACK);
	tft_drawRect(InstancePtr, SCORE_BOX2_START_X, SCORE_BOX_START_Y,
			SCORE_BOX2_END_X, SCORE_BOX_END_Y, COLOR_BLACK);
	tft_drawRect(InstancePtr, SCORE_BOX3_START_X, SCORE_BOX_START_Y,
			SCORE_BOX4_END_X, SCORE_BOX_END_Y, COLOR_BLACK);

	// Current time
	tft_fillRect(InstancePtr, TIME_START_X, TIME_START_Y, TIME_END_X,
			TIME_END_Y, COLOR_GREY);
	tft_drawRect(InstancePtr, TIME_START_X, TIME_START_Y, TIME_END_X,
			TIME_END_Y, COLOR_BLACK);
	tft_writeString(InstancePtr, TIME_START_X, TIME_START_Y - 20, "Time: ",
			COLOR_BLACK, COLOR_WHITE);

	// Current Ball Speed
	tft_fillRect(InstancePtr, BALL_SPEED_START_X, BALL_SPEED_START_Y,
			BALL_SPEED_END_X, BALL_SPEED_END_Y, COLOR_GREY);
	tft_drawRect(InstancePtr, BALL_SPEED_START_X, BALL_SPEED_START_Y,
			BALL_SPEED_END_X, BALL_SPEED_END_Y, COLOR_BLACK);
	tft_writeString(InstancePtr, BALL_SPEED_START_X, BALL_SPEED_START_Y - 20,
			"Ball Speed: ", COLOR_BLACK, COLOR_WHITE);

	// Bricks Left
	tft_fillRect(InstancePtr, BRICK_LEFT_START_X, BRICK_LEFT_START_Y,
			BRICK_LEFT_END_X, BRICK_LEFT_END_Y, COLOR_GREY);
	tft_drawRect(InstancePtr, BRICK_LEFT_START_X, BRICK_LEFT_START_Y,
			BRICK_LEFT_END_X, BRICK_LEFT_END_Y, COLOR_BLACK);
	tft_writeString(InstancePtr, BRICK_LEFT_START_X, BALL_SPEED_END_Y + 5,
			"Bricks left: ", COLOR_BLACK, COLOR_WHITE);

	tft_addCircle(InstancePtr, CIRCLE_X, CIRCLE_Y, CIRCLE_RADIUS);
}

int tft_update(XTft *InstancePtr);

int tft_updateColumn(XTft *InstancePtr, const int col_x, int currentBricks,
		int futureBricks, unsigned int currentColour, unsigned int futureColour) {

	int row_num, row_y, updateBricks, updateAddBricks, updateRemoveBricks;

	updateBricks = currentBricks ^ futureBricks; // get required bricks to update
	updateAddBricks = futureBricks & updateBricks;	// get what bricks to add.
	updateRemoveBricks = (~futureBricks) & updateBricks; // get what bricks to remove

	// case 1 : need remove bricks.

	row_num = 0; // reset row number

	while (updateRemoveBricks) {
		// removeBricks if there is bricks to remove
		if (updateRemoveBricks & 1) {
			// if current bricks is to be removed....
			row_y = ROW_Y_END - ROW_OFFSET * row_num; // position of y to draw rect.

			tft_fillBrick(InstancePtr, col_x, row_y, col_x + BRICK_SIZE_LENGTH,
					row_y + BRICK_SIZE_HEIGHT, COLOR_GREEN);

			tft_removeBrick(InstancePtr, col_x, row_y,
					col_x + BRICK_SIZE_LENGTH, row_y + BRICK_SIZE_HEIGHT);
		}

		updateRemoveBricks = updateRemoveBricks >> 1; // move to next brick to check
		row_num++;
	}

	// case 2 : need add bricks.

	row_num = 0; // reset row number

	while (updateAddBricks) {
		// addBricks if there is bricks to add
		if (updateAddBricks & 1) {
			// if current bricks is to be added....

			row_y = ROW_Y_END - ROW_OFFSET * row_num; // position of y to draw rect.



			tft_fillBrick(InstancePtr, col_x, row_y, col_x + BRICK_SIZE_LENGTH,
					row_y + BRICK_SIZE_HEIGHT, futureColour);

			tft_addBrick(InstancePtr, col_x, row_y, col_x + BRICK_SIZE_LENGTH,
					row_y + BRICK_SIZE_HEIGHT);
		}

		updateAddBricks = updateAddBricks >> 1; // move to next brick to check
		row_num++;
	}

	// case 3 : need update colour (bricks are already added/remove... just fill them)

	row_num = 0; // reset row number

	while (futureBricks && (currentColour != futureColour)) {
		// fill all bricks in futureBricks
		if (futureBricks & 1) {
			// if current bricks is to be filled....
			row_y = ROW_Y_END - ROW_OFFSET * row_num; // position of y to draw rect.

			tft_fillBrick(InstancePtr, col_x, row_y, col_x + BRICK_SIZE_LENGTH,
					row_y + BRICK_SIZE_HEIGHT, futureColour);

			tft_addBrick(InstancePtr, col_x, row_y, col_x + BRICK_SIZE_LENGTH,
					row_y + BRICK_SIZE_HEIGHT);
		}

		futureBricks = futureBricks >> 1; // move to next brick to check
		row_num++;
	}

}

int tft_updateScore(XTft *InstancePtr, int score) {
	int score_Digit_Hundredth, score_Digit_Tens, score_Digit_Ones;
	if (score != 0)
		score_Digit_Ones = score % 10;
	else
		score_Digit_Ones = 0;
	score = score / 10;
	if (score != 0)
		score_Digit_Tens = score % 10;
	else
		score_Digit_Tens = 0;
	score = score / 10;
	if (score != 0)
		score_Digit_Hundredth = score % 10;
	else
		score_Digit_Hundredth = 0;


	tft_writeInteger(InstancePtr, SCORE_BOX1_START_X + 9,
			SCORE_BOX_START_Y + 15, score_Digit_Hundredth, COLOR_BLACK,COLOR_GREY); //Hundred
	tft_writeInteger(InstancePtr, SCORE_BOX2_START_X + 9,
			SCORE_BOX_START_Y + 15, score_Digit_Tens, COLOR_BLACK, COLOR_GREY); //Tenth
	tft_writeInteger(InstancePtr, SCORE_BOX3_START_X + 9,
			SCORE_BOX_START_Y + 15, score_Digit_Ones, COLOR_BLACK, COLOR_GREY); //one digit

}

int tft_updateTime(XTft *InstancePtr, int gameTime) {
	int gameTime_mins = 0, gameTime_secs = 0, gameTime_mins_higherBit = 0,
			gameTime_secs_higherBit = 0, gameTime_mins_lowerBit = 0,
			gameTime_secs_lowerBit = 0;

	if (gameTime == 0) {
		gameTime_mins = 0;
		gameTime_secs = 0;
	} else if (gameTime >= 60) {
		gameTime_mins = gameTime / 60;
		gameTime_secs = gameTime - (gameTime_mins * 60);
	} else
		gameTime_secs = gameTime;

	//two bits of time in minutes
	gameTime_mins_higherBit = gameTime_mins / 10;
	gameTime_mins_lowerBit = gameTime_mins % 10;

	//two bits of time in seconds
	gameTime_secs_higherBit = gameTime_secs / 10;
	gameTime_secs_lowerBit = gameTime_secs % 10;

	tft_writeInteger(InstancePtr, TIME_START_X + 35, TIME_START_Y + 5,
			gameTime_mins_higherBit, COLOR_BLACK, COLOR_GREY);
	tft_writeInteger(InstancePtr, TIME_START_X + 45, TIME_START_Y + 5,
			gameTime_mins_lowerBit, COLOR_BLACK, COLOR_GREY);
	tft_writeString(InstancePtr, TIME_START_X + 53, TIME_START_Y + 5, ":",
			COLOR_BLACK, COLOR_GREY);
	tft_writeInteger(InstancePtr, TIME_START_X + 61, TIME_START_Y + 5,
			gameTime_secs_higherBit, COLOR_BLACK, COLOR_GREY);
	tft_writeInteger(InstancePtr, TIME_START_X + 71, TIME_START_Y + 5,
			gameTime_secs_lowerBit, COLOR_BLACK, COLOR_GREY);

}

int tft_updateSpeed(XTft *InstancePtr, int speed)
{
	static prev_speed = INITIAL_SPEED;

	int temp_speed = speed, count = 0, prev_count = 0;

	if(prev_speed == speed)
	{
		return 1;

	}


	while ((temp_speed /= 10) != 0) {
		count++;
	}

	while ((prev_speed /= 10) != 0) {
		prev_count++;
	}


	if(prev_count != count)
	{
		tft_fillRect(InstancePtr, BALL_SPEED_START_X + 5, BALL_SPEED_START_Y+5,
				BALL_SPEED_END_X - 5, BALL_SPEED_END_Y-5, COLOR_GREY);

	}

	switch (count) {
	case 0:
		tft_writeInteger(InstancePtr, BALL_SPEED_START_X + 53,
				BALL_SPEED_START_Y + 5, speed, COLOR_BLACK, COLOR_GREY);
		break;
	case 1:
		tft_writeInteger(InstancePtr, BALL_SPEED_START_X + 53,
				BALL_SPEED_START_Y + 5, speed, COLOR_BLACK, COLOR_GREY);
		break;
	case 2:
		tft_writeInteger(InstancePtr, BALL_SPEED_START_X + 50,
				BALL_SPEED_START_Y + 5, speed, COLOR_BLACK, COLOR_GREY);
		break;
	case 3:
		tft_writeInteger(InstancePtr, BALL_SPEED_START_X + 47,BALL_SPEED_START_Y + 5, speed, COLOR_BLACK, COLOR_GREY);
		break;
	}

	prev_speed = speed;
}

int tft_updateBricksLeft(XTft *InstancePtr, int bricksLeft) {
	int temp_brickLeft = bricksLeft, count = 0;
	while ((temp_brickLeft /= 10) != 0) {
		count++;
	}
	switch (count) {
	case 0:
		tft_writeInteger(InstancePtr, BRICK_LEFT_START_X + 53,
				BRICK_LEFT_START_Y + 5, bricksLeft, COLOR_BLACK, COLOR_GREY);
		break;
	case 1:
		tft_writeInteger(InstancePtr, BRICK_LEFT_START_X + 53,
				BRICK_LEFT_START_Y + 5, bricksLeft, COLOR_BLACK, COLOR_GREY);
		break;
	case 2:
		tft_writeInteger(InstancePtr, BRICK_LEFT_START_X + 50,
				BRICK_LEFT_START_Y + 5, bricksLeft, COLOR_BLACK, COLOR_GREY);
		break;
	}

}

int tft_writeInteger(XTft *InstancePtr, int x, int y, const int value,
		u32 foreGround, u32 backGround) {
	char buffer[6];
	itoa(value, buffer);
	return tft_writeString(InstancePtr, x, y, buffer, foreGround, backGround);
}

int tft_writeString(XTft *InstancePtr, int x, int y, const char *CharValue,
		u32 foreGround, u32 backGround) {
	/*
	 * Writes a character from the string to the screen
	 * until it reaches null or end of the string.
	 */
	XTft_SetPosChar(InstancePtr, x, y);
	XTft_SetColor(InstancePtr, foreGround, backGround);
	while (*CharValue != 0) {
		XTft_Write(InstancePtr, *CharValue);
		CharValue++;
	}

	return XST_SUCCESS;
}

int tft_addCircle(XTft *InstancePtr, int x0, int y0, int radius) {
	tft_drawCircle(InstancePtr, x0, y0, radius, COLOR_YELLOW);
}

int tft_removeCircle(XTft *InstancePtr, int x0, int y0, int radius) {
	tft_drawCircle(InstancePtr, x0, y0, radius, COLOR_GREEN);
}

int tft_drawCircle(XTft *InstancePtr, int x0, int y0, int radius,
		unsigned int colour) {
	int x = radius;
	int y = 0;
	int decisionOver2 = 1 - x; // Decision criterion divided by 2 evaluated at x=r, y=0

	// check if circle exceed boundary
	if (x0 + radius > DISPLAY_COLUMNS || y0 + radius > DISPLAY_ROWS
			|| x0 - radius < 0 || y0 - radius < 0) {
		// exceed boundary to draw circle..
		return XST_FAILURE;
	}

	while (y <= x) {
		tft_drawLine(InstancePtr, -x + x0, y0 + y, x + x0, y0 + y, colour);
		tft_drawLine(InstancePtr, -y + x0, x + y0, y + x0, x + y0, colour);
		tft_drawLine(InstancePtr, -x + x0, -y + y0, x + x0, -y + y0, colour);
		tft_drawLine(InstancePtr, -y + x0, -x + y0, y + x0, -x + y0, colour);
		//XTft_SetPixel(InstancePtr, x + x0,  y + y0, COLOR_BLACK); // Octant 1 (outline)
		//XTft_SetPixel(InstancePtr, -x + x0,  y + y0, COLOR_BLACK); // Octant 4 (outline)

		//XTft_SetPixel(InstancePtr, y + x0,  x + y0, COLOR_BLACK); // Octant 2 (outline)
		//XTft_SetPixel(InstancePtr, -y + x0,  x + y0, COLOR_BLACK); // Octant 3 (outline)

		//XTft_SetPixel(InstancePtr, -x + x0, -y + y0, COLOR_BLACK); // Octant 5 (outline)
		//XTft_SetPixel(InstancePtr, x + x0, -y + y0, COLOR_BLACK); // Octant 7 (outline)

		//XTft_SetPixel(InstancePtr, -y + x0, -x + y0, COLOR_BLACK); // Octant 6 (outline)
		//XTft_SetPixel(InstancePtr, y + x0, -x + y0, COLOR_BLACK); // Octant 8 (outline)

		y++;

		if (decisionOver2 <= 0) {
			decisionOver2 += 2 * y + 1; // Change in decision criterion for y -> y+1
		} else {
			x--;
			decisionOver2 += 2 * (y - x) + 1;   // Change for y -> y+1, x -> x-1
		}
	}

	return XST_SUCCESS;
}

int tft_addBrick(XTft *InstancePtr, u32 ColStartPos, u32 RowStartPos,
		u32 ColEndPos, u32 RowEndPos) {

	tft_drawRect(InstancePtr, ColStartPos, RowStartPos, ColEndPos, RowEndPos,
			COLOR_BLACK);
}

int tft_removeBrick(XTft *InstancePtr, u32 ColStartPos, u32 RowStartPos,
		u32 ColEndPos, u32 RowEndPos) {

	tft_fillRect(InstancePtr, ColStartPos, RowStartPos, ColEndPos, RowEndPos,
			COLOR_GREEN);
}

int tft_fillBrick(XTft *InstancePtr, u32 ColStartPos, u32 RowStartPos,
		u32 ColEndPos, u32 RowEndPos, unsigned int color) {

	tft_fillRect(InstancePtr, ColStartPos, RowStartPos, ColEndPos, RowEndPos,
			color);
}

int tft_removeBar(XTft *InstancePtr, u32 ColStartPos, u32 RowStartPos,
		u32 ColEndPos, u32 RowEndPos)
{
	tft_fillRect(InstancePtr, ColStartPos, RowStartPos, ColEndPos,
			RowEndPos, COLOR_GREEN);
}

int tft_addBar(XTft *InstancePtr, u32 ColStartPos, u32 RowStartPos,
		u32 ColEndPos, u32 RowEndPos) {

	//N-region

	tft_fillRect(InstancePtr, (ColStartPos + 20), RowStartPos, (ColEndPos - 20), RowEndPos,
			COLOR_GREY);
	//S- region
	tft_fillRect(InstancePtr, (ColStartPos + 10), RowStartPos, (ColStartPos + 20), RowEndPos,
			COLOR_LIGHT_BLUE);
	//S+ region
	tft_fillRect(InstancePtr, (ColEndPos - 20), RowStartPos, (ColEndPos - 10), RowEndPos,
			COLOR_LIGHT_BLUE);
	//A- region
	tft_fillRect(InstancePtr, ColStartPos, RowStartPos, (ColStartPos + 10), RowEndPos,
			COLOR_RED);
	//A+ region
	tft_fillRect(InstancePtr, (ColEndPos - 10), RowStartPos, ColEndPos, RowEndPos,
			COLOR_RED);
	tft_drawRect(InstancePtr, ColStartPos, RowStartPos, ColEndPos, RowEndPos,
			COLOR_BLACK);
	// tft_fillRect(InstancePtr, ColStartPos, RowStartPos, ColEndPos, RowEndPos,
	// 		colour); // line color = black

}

int tft_moveCircle(XTft *InstancePtr, int x0, int y0, int future_x0,
		int future_y0, int speed) {
	//	int speedX = 0, speedY = 0;
	//	if(angle == 0)
	//	{
	int diff_X = 0, diff_Y = 0, number_of_Steps_X = 0, number_of_Steps_Y = 0,
			i = 0, j =0;
	diff_X = future_x0 - x0;
	diff_Y = future_y0 - y0;

	tft_removeCircle(InstancePtr, x0, y0, CIRCLE_RADIUS);
	//if the distance between 2 points is >> speed then it will need to take a nubmer of steps before the ball will reach the destination
	if (diff_X > speed) {
		number_of_Steps_X = diff_X / speed;
	}
	if (diff_Y > speed) {
		number_of_Steps_Y = diff_Y / speed;
	}
	if (number_of_Steps_Y > 0 && number_of_Steps_X <= 0) {
		for (i = 0; i < number_of_Steps_Y; i++) {
			future_y0 = y0 + ((i + 1) * speed);
			tft_addCircle(InstancePtr, future_x0, future_y0, CIRCLE_RADIUS);
		}
	}
	else if (number_of_Steps_X > 0 && number_of_Steps_Y <= 0) {
		for (i = 0; i < number_of_Steps_X; i++) {
			future_x0 = x0 + ((i + 1) * speed);
			tft_addCircle(InstancePtr, future_x0, future_y0, CIRCLE_RADIUS);
		}
	}
	else
	{
		for (i = 0; i < number_of_Steps_X; i++) {
			for (j = 0; j < number_of_Steps_X; j++) {
				future_x0 = x0 + ((i + 1) * speed);
			}
		}

	}
	//	}
}

int tft_moveBar(XTft *InstancePtr, bar_msg bar_updated)
{
	static bar_msg bar_prev = {.start_x = BAR_START_X, .start_y = BAR_START_Y, 
			.end_x = (BAR_START_X + BAR_LENGTH), .end_y = (BAR_START_Y + BAR_HEIGHT)};

	static bar_msg bar_current = {.start_x = BAR_START_X, .start_y = BAR_START_Y, .end_x = (BAR_START_X + BAR_LENGTH), .end_y = (BAR_START_Y + BAR_HEIGHT)};;


	/********************* end of init *************************/

	// this function will delay printing bar_updated for 1 clock cycle (after processing is done by another core)

	// 1. Check is bar_prev and bar_current are not the same...

	if(bar_prev.start_x != bar_current.start_x)
	{
		// 2. remove previous bar location...
		tft_removeBar(InstancePtr, bar_prev.start_x, bar_prev.start_y, bar_prev.end_x, bar_prev.end_y);

		// 3. add new bar location
		tft_addBar(InstancePtr, bar_current.start_x, bar_current.start_y, bar_current.end_x, bar_current.end_y);
	}


	// Update bar_prev and bar_current...
	bar_prev = bar_current;
	bar_current = bar_updated;

	return XST_SUCCESS;
}




int tft_drawLine(XTft *InstancePtr, u32 ColStartPos, u32 RowStartPos,
		u32 ColEndPos, u32 RowEndPos, unsigned int colour) {
	u32 Slope;
	u32 YIntercept;
	u32 Xmin;
	u32 Ymin;
	u32 Xmax;
	u32 Ymax;
	u32 Index1;
	u32 Index2;
	u32 Mx;

	/*
	 * Check whether the given position of X,Y dimensions
	 * are below the limits of the screen.
	 */
	if (ColStartPos >= 0 && ColStartPos <= (XTFT_DISPLAY_WIDTH - 1)
			&& ColEndPos >= 0 && ColEndPos <= (XTFT_DISPLAY_WIDTH - 1)
			&& RowStartPos >= 0 && RowStartPos <= (XTFT_DISPLAY_HEIGHT - 1)
			&& RowEndPos >= 0 && RowEndPos <= (XTFT_DISPLAY_HEIGHT - 1)) {

		/*
		 * Check the exception case where slope can be infinite
		 * that is vertical line.
		 */
		if (ColEndPos - ColStartPos != 0) {
			/*
			 * Calculate slope.
			 */
			Slope = ((RowEndPos - RowStartPos) / (ColEndPos - ColStartPos)
					* 100000);

			/*
			 * Calculate y intercept.
			 */
			YIntercept = RowStartPos - ((Slope / 100000) * ColStartPos);
		} else {
			/*
			 * Divide by zero.
			 */
			Slope = 0;
			YIntercept = (-1);
		}

		/*
		 * Update the min and max position by conditional checking.
		 */
		if (ColEndPos < ColStartPos) {
			Xmin = ColEndPos;
			Xmax = ColStartPos;
		} else {
			Xmin = ColStartPos;
			Xmax = ColEndPos;
		}
		if (RowEndPos < RowStartPos) {
			Ymin = RowEndPos;
			Ymax = RowStartPos;
		} else {
			Ymin = RowStartPos;
			Ymax = RowEndPos;
		}

		/*
		 * Increment X and Y position values and calculate
		 * slope at the corresponding x position. Check the condition
		 * for general line equation and set the pixel. Otherwise check
		 * for the case of vertical line.
		 */
		for (Index1 = Xmin; Index1 <= Xmax; Index1++) {
			Mx = (Slope * Index1) / 100000;
			for (Index2 = Ymin; Index2 <= Ymax; Index2++) {
				if ((Index2 - Mx) == YIntercept) {

					/*
					 * Calculate visible line.
					 */
					XTft_SetPixel(InstancePtr, Index1, Index2, colour);
				} else {
					/*
					 * Divide by zero.
					 */
					if ((Slope == 0) && (YIntercept == -1)) {

						/*
						 * Vertical line.
						 */
						XTft_SetPixel(InstancePtr, Index1, Index2, colour);
					}
				}
			}
		}
		return XST_SUCCESS;
	} else {
		return XST_FAILURE;
	}
}

void tft_drawRect(XTft *InstancePtr, u32 ColStartPos, u32 RowStartPos,
		u32 ColEndPos, u32 RowEndPos, u32 colour) {
	tft_drawLine(InstancePtr, ColStartPos, RowStartPos, ColEndPos, RowStartPos,
			colour);
	tft_drawLine(InstancePtr, ColStartPos, RowStartPos, ColStartPos, RowEndPos,
			colour);
	tft_drawLine(InstancePtr, ColStartPos, RowEndPos, ColEndPos, RowEndPos,
			colour);
	tft_drawLine(InstancePtr, ColEndPos, RowStartPos, ColEndPos, RowEndPos,
			colour);
}

void tft_fillRect(XTft *InstancePtr, u32 ColStartPos, u32 RowStartPos,
		u32 ColEndPos, u32 RowEndPos, u32 colour) {
	XTft_FillScreen(InstancePtr, ColStartPos, RowStartPos, ColEndPos, RowEndPos,
			colour);
}

void gameFinishChecker (XTft *InstancePtr, int gameStatus, int numOfBricksLeft)
{
	tft_fillRect(InstancePtr, OUTER_COL_START_X, OUTER_COL_START_Y,
			OUTER_COL_END_X, OUTER_COL_END_Y, COLOR_GREEN);
	tft_drawRect(InstancePtr, OUTER_COL_START_X, OUTER_COL_START_Y,
			OUTER_COL_END_X, OUTER_COL_END_Y, COLOR_BLACK);
	if((gameStatus == WIN_STATUS) && (numOfBricksLeft == 0))
	{
		tft_writeString(InstancePtr, 240, 140, "YOU WIN!!!",COLOR_BLACK, COLOR_GREEN);
		tft_writeString(InstancePtr, 200, 155, "Press any button to restart",COLOR_BLACK, COLOR_GREEN);
	}
	else if((gameStatus == LOSE_STATUS) && (numOfBricksLeft != 0))
	{
		tft_writeString(InstancePtr, 240, 140, "GAME OVER....",COLOR_BLACK, COLOR_GREEN);
	}
	else
	{

	}
}

void itoa(int n, char s[]) {
	int i, sign;

	if ((sign = n) < 0) /* record sign */
		n = -n; /* make n positive */
	i = 0;
	do { /* generate digits in reverse order */
		s[i++] = n % 10 + '0'; /* get next digit */
	} while ((n /= 10) > 0); /* delete it */
	if (sign < 0)
		s[i++] = '-';
	s[i] = '\0';
	reverse(s);
}

void reverse(char s[]) {
	int i, j;
	char c;

	for (i = 0, j = strlen(s) - 1; i < j; i++, j--) {
		c = s[i];
		s[i] = s[j];
		s[j] = c;
	}
}


/*
 * project_core0.c
 *
 *  Created on: Mar 17, 2016
 *      Author: KaiHsiang
 */

#include "xmk.h"
#include <pthread.h>
#include "semaphore.h"
#include <xparameters.h>
#include "xmbox.h"
#include "xstatus.h"
#include <pthread.h>
#include <errno.h>
#include <sys/msg.h>
#include <sys/ipc.h>
#include <sys/timer.h>
#include <stdio.h>
#include <stdlib.h>
#include "sys/init.h"
#include "myCommon.h"
#include "myBarrier.h"
#include "ballControl.h"

#define MAX_RAND_SLEEP    30   // for snatching colour sema


// 5 Priority levels for this processor.
#define PRIO_CONTROLLER 1
//#define PRIO_BAR    2
#define PRIO_BALL       2
#define PRIO_BRICKS     3
#define PRIO_SCORE_ZONE 5


// mailbox declaration
#define MBOX_DEVICE_ID    XPAR_MBOX_0_DEVICE_ID

#define MSGQ_ID_BALL   1
#define MSGQ_ID_BRICK  2
#define MSGQ_ID_BAR    3




#define MAX_BRICKS_THREAD 10

 // put me in brick? display?



/**************** Global Thread Synchronisation variables **********************/

sem_t sem_colour_yellow;
sem_t sem_colour_background;

barrier_t barrier_bounceCheck_start;  // synchronise all bricks and ball threads.
barrier_t barrier_bounceCheck_end;    //  ensure brick and ball threads complete execution.

//barrier_t barrier_bricks;  // synchronise all bricks threads.

barrier_t barrier_score;  // synchronise all bricks threads score calculation. Settled by colour end


barrier_t barrier_colour_start;  // signal that the colours resources for the bricks is ready
barrier_t barrier_colour_end;  // ensure threads complete execution of changing colour

pthread_mutex_t mutex_bricks;



/**************** Global variables **********************/

char init = 1;
int  global_score = 0;                   // score that is accessible by all threads.

ball_msg global_ballBounceCheck;        //  temp location, which the ball hit the brick.
int global_bounceHit = 0;               //  hit bricks which causes bounce to be used by brick threads
char global_bounceCompleted = 0;         //  Signal bounce have been completed


char global_colourFlag = 1;

const int FPS_MS = 1000*(1.0/FPS);
const int global_col_x[] = { ALL_COL_X };

/************************** Function Prototype  ****************************/


void main_prog(void);
void* thread_func_controller();
void* thread_func_ball();
void thread_func_brick(char columnNumber);
int init_mailBox(XMbox *MboxPtr);
int init_threads();
unsigned int myCommon_ticks_to_ms(unsigned int ticks);
unsigned int updateBrickColour(unsigned int currentColour);
int msgQueue_receiveBricks(int msgQ_brick_id, int colThreads, allBricks_msg *allBricks_recv);
void changeBrickColour(int global_score, int colThreadsLeft);

int main (void)
{
  xilkernel_init();
  xmk_add_static_thread((void *)main_prog,0);
  xilkernel_start();
    //Start Xilkernel
  xilkernel_main ();

    //Control does not reach here



    return 1;

}

void main_prog(void)
{   // This thread is statically created (as configured in the kernel configuration) and has priority 0 (This is the highest possible)

    /************************** Mutex Init ****************************/

    if (pthread_mutex_init (&mutex_bricks, NULL) != 0)
    {
      print ("Error when initializing mutex");
    }



    /************************** Semaphore Init ****************************/

    if (sem_init(&sem_colour_yellow, 0, 0) < 0) // init sem_colour_yellow with 2 resource
    {
      print("Error while initializing semaphore sem.\r\n");
    }

    // initialize the semaphore
    if (sem_init(&sem_colour_background, 0, 0) < 0) // init sem_colour_background with 8 resource
    {
      print("Error while initializing semaphore sem.\r\n");
    }


    /************************** Barrier Init ****************************/

    if( myBarrier_init(&barrier_score, MAX_BRICKS_THREAD + 1) != 0) // barrier to signal that score is updated.
    {
      xil_printf("Error when initializing barrier...\r\n");
    }

    if( myBarrier_init(&barrier_colour_start, MAX_BRICKS_THREAD + 1) != 0) // barrier to signal colour resource is ready . bricks + controller
    {
        xil_printf("Error when initializing barrier...\r\n");
    }

    if( myBarrier_init(&barrier_colour_end, MAX_BRICKS_THREAD + 1) != 0) // barrier to signal colour resource is ready . bricks + controller
    {
        xil_printf("Error when initializing barrier...\r\n");
    }

    if( myBarrier_init(&barrier_bounceCheck_start, MAX_BRICKS_THREAD + 1) != 0) // barrier to synchronise ball and brick thread. bricks + balls
    {
        xil_printf("Error when initializing barrier...\r\n");
    }


    if( myBarrier_init(&barrier_bounceCheck_end, MAX_BRICKS_THREAD + 1) != 0) // barrier to synchronise ball and brick thread. bricks + balls
    {
        xil_printf("Error when initializing barrier...\r\n");
    }


    // if( myBarrier_init(&barrier_bricks, MAX_BRICKS_THREAD) != 0) // barrier to synchronise all bricks thread..
    // {
    //     xil_printf("Error when initializing barrier...\r\n");
    // }






    /************************** Threads Init ****************************/

    if (init_threads() != 0)
    {
      //  error handling...
      print("-- Error initializing thread : Core 1--\r\n");
    }



}

int init_mailBox(XMbox *MboxPtr)
{
    XMbox_Config *ConfigPtr;

    int mailbox_status = 0;

    /************************** Mailbox Init ****************************/



    ConfigPtr = XMbox_LookupConfig(MBOX_DEVICE_ID );
    if (ConfigPtr == (XMbox_Config *)NULL)
    {
      // error handling...
         print("-- Error configuring Mailbox Bsp 1 --\r\n");
        return XST_FAILURE;
      }

    mailbox_status = XMbox_CfgInitialize(MboxPtr, ConfigPtr, ConfigPtr->BaseAddress);
    if (mailbox_status != XST_SUCCESS)
    {
      //  error handling...
      print("-- Error initializing Mailbox : Bsp 1--\r\n");
      return XST_FAILURE;
    }

    return XST_SUCCESS;
}

int init_threads()
{
  /************************** Threading variables ****************************/

  pthread_attr_t attr;

  pthread_t tid_controller, tid_ball, tid_bricks[MAX_BRICKS_THREAD];

  /************************** Scheduling variables ****************************/

  struct sched_param sched_par;

  /************************** Normal variables ****************************/

  int  thread_status = 0, iterator;

  /************************** Controller Thread Init ****************************/

  pthread_attr_init(&attr);           // get attribute for thread.

  sched_par.sched_priority = PRIO_CONTROLLER; // set priority for mailbox thread
  pthread_attr_setschedparam(&attr, &sched_par);  // update priority attribute

  //create controller thread
  thread_status += pthread_create(&tid_controller, NULL, (void*) thread_func_controller, NULL );

  /************************** Ball Thread Init ****************************/

  sched_par.sched_priority = PRIO_BALL; // set priority for mailbox thread
  pthread_attr_setschedparam(&attr, &sched_par);  // update priority attribute

  //create controller thread
  thread_status += pthread_create(&tid_ball, NULL, (void*) thread_func_ball, NULL );


  /************************** Brick Threads Init ****************************/


  sched_par.sched_priority = PRIO_BRICKS; // set priority for mailbox thread
  pthread_attr_setschedparam(&attr, &sched_par);  // update priority attribute

  for (iterator = 0 ; iterator < MAX_BRICKS_THREAD ; iterator ++)
  {
      thread_status += pthread_create(&tid_bricks[iterator], NULL, (void*) thread_func_brick, (void*)iterator );
  }


  return thread_status;
}

// 1. Controller is the brain ....
void* thread_func_controller()
{

  static XMbox Mbox; /* Instance of the Mailbox driver */
  int msgQ_brick_id, msgQ_ball_id, msgQ_bar_id;

  unsigned int startTime_ms, endTime_ms, leftOverTime_ms;

  int colThreadsLeft = 10; // how to find this can signal? via queue?

  // got pthread_kill(thread_id , 0) ?? if got use ESRCH to check if still alive..

  bar_msg bar_recv;
  ball_msg ball_recv;
  allBricks_msg allBricks_recv;

  allProcessor_msg allProcessor_send;



    /************************** Mailbox Init ****************************/

    init_mailBox(&Mbox);
    /************************** Message Q Init ****************************/

    msgQ_ball_id = msgget (MSGQ_ID_BALL, IPC_CREAT);  // gain access to q or create if not yet valid.
    msgQ_brick_id = msgget (MSGQ_ID_BRICK, IPC_CREAT); // gain access to q or create if not yet valid.
    msgQ_bar_id = msgget (MSGQ_ID_BAR, IPC_CREAT);    // gain access to q or ...



    while(1)
    {


      // get current tick (before processing) ...
      startTime_ms = myCommon_ticks_to_ms(xget_clock_ticks());


      // 1. Mailbox block receive (bar location) ** Opposite side must send initial bar location
      XMbox_ReadBlocking(&Mbox, &bar_recv, sizeof(bar_msg));

      // send to ball thread, (Implicitly launch all threads.)
      if( msgsnd( msgQ_bar_id, &bar_recv, sizeof(bar_msg), 0) < 0 )
      {
            // Error handling.
            print ("Error in sending message from ball thread");
      }





      // 2. Wait for score to be updated using mutex_bricks
      myBarrier_wait(&barrier_score); // wait for score to be updated by bricks thread.
      //xil_printf("At controller score is %d\n", score);

      // 3. Change Brick Colour, release barrier for them to update colour
      changeBrickColour(global_score, colThreadsLeft);       // change brick colour by releasing semaphore.. based on score..
      myBarrier_wait(&barrier_colour_start);  // signal all bricks threads, they are ready to be updated with new colour
      


      // 4. Get final ball location via msg queue?
      if( msgrcv( msgQ_ball_id, &ball_recv, sizeof(ball_msg), 0,0 ) != sizeof(ball_msg) )
      {
          // Error handling.
          print ("Error in receiving message from bricks thread");
      }

//      xil_printf("At controller ball location is x : %d y : %d\n", ball_recv.x , ball_recv.y);

      myBarrier_wait(&barrier_colour_end);   // wait for bricks to finish changing colour?


      // 5. Get final bricks location via msg queue? blocking!
      if (msgQueue_receiveBricks(msgQ_brick_id, colThreadsLeft, &allBricks_recv))
      {
          // Error handling.
          print ("Error in receiving message from bricks thread");
      }

//      int i;
//      for(i = 0; i < 10 ; i++)
//      xil_printf("At controller bricks is %d\n colour is %d\n", allBricks_recv.allMsg[i].columnNumber, allBricks_recv.allMsg[i].colour);
//
//      xil_printf("end of 1 send \n\n\n");
      // 6. Get current tick (after processing)
      endTime_ms = myCommon_ticks_to_ms(xget_clock_ticks());
      leftOverTime_ms = FPS_MS - (endTime_ms - startTime_ms);  // time to sleep = FPS ticks - processing time.....

     // xil_printf("I am sleeping for %d\n fps : %d , start : %d , end %d", leftOverTime_ms, FPS_MS, startTime_ms, endTime_ms);

      // 7. Sleep(time left)
      //sleep(leftOverTime_ms);
      sleep(40);

      // 8. Send all updated values via MAILBOX
      allProcessor_send.score = global_score;
      allProcessor_send.msg_Allbricks = allBricks_recv;
      allProcessor_send.msg_ball = ball_recv;

      XMbox_WriteBlocking(&Mbox, &allProcessor_send, sizeof(allProcessor_msg));

  }

}

void* thread_func_ball()
{
  int msgQ_ball_id, msgQ_bar_id;

  ball_msg ball_send;
  //ball_msg ball_temp;
  
  bar_msg bar_recv; // received bar msg...
  
  //int dir,speed,x,y;
  

  // initial ball parameters
  ball_send.speed =  INITIAL_SPEED;
  ball_send.dir   = BALL_INITIAL_DIR;

  ball_send.x     = CIRCLE_X;
  ball_send.y     = CIRCLE_Y;


  // MSG Q init.
  msgQ_ball_id = msgget (MSGQ_ID_BALL, IPC_CREAT); // gain access to q or create if not yet valid.
  msgQ_bar_id = msgget (MSGQ_ID_BAR, IPC_CREAT);    // gain access to q or ...

  int numberOfSteps, i;
  float ballSpeed_frame, ballSpeed_step, ballSpeed_forward;

  while(1)
  {

    /********************* 0. Initialise every iteration  ****************/
    // 0.1  : Init no bounce hit every iteration ... 
    global_bounceHit = 0;

    // 0.2  : Update global_ballBounceCheck every iteration ... 
    global_ballBounceCheck = ball_send;

    // 0.3  : Init bounce check not completed.
    global_bounceCompleted = 0;

    /****************** 1. Get update bar position  *********************/
    
    // 1.1 :  msgQ wait for bar position from another processor
    if( msgrcv( msgQ_bar_id, &bar_recv, sizeof(bar_msg), 0,0 ) != sizeof(bar_msg) )
    {
          // Error handling.
          print ("Error in receiving message from bricks thread");
    }


    /****************** 2. Get speeds and # of step  ****************/

    // 2.1  : Get Speed per frame, Speed per step, # of steps
    ballSpeed_frame = myBallControl_getFrameSpeed(ball_send.speed);  // get speed per frame
    //xil_printf("Ball Speed : %d, Ball Frame : %d\n" , ball_send.speed, (int)ballSpeed_frame);
    numberOfSteps = myBallControl_getSteps(ballSpeed_frame, ball_send.dir);          // get # of steps that the ball should slowly move to prevent hitting 2 bricks in 1 frame
    //xil_printf("Steps obtained : %d\n" , numberOfSteps);

    ballSpeed_step = myBallControl_getStepSpeed(ballSpeed_frame, numberOfSteps); // get ball speed per frame per step..

    /****************** 3. Generate ball location for each steps  ****************/

    // 3.1  : Get updated ball location per step.

    // move from 1st step to last step
    for(i = 1 ; i <= numberOfSteps ; i++)
    {
        if(i == numberOfSteps )
        {
          // if it is last step move to that position... 
          //forwards step iteration used rounding may not be as accurate
          global_ballBounceCheck = myBallControl_moveBall_frame(ballSpeed_frame, ball_send);

        }
        else
        {
          // forward steps iteration
          global_ballBounceCheck = myBallControl_moveBall_step(ballSpeed_step, global_ballBounceCheck);
        }

        xil_printf("Step Ball Location : %d , %d\n", global_ballBounceCheck.x, global_ballBounceCheck.y);


      /****************** 4. Check bounce hit for each steps  ****************/


      // 4.1  : Check if hit bar..
        
        // ******
        // if(barHit or outerboundary) global_bounceHit = 1; break;




      // 4.2  : Release barrier for bounce check to begin....

      myBarrier_wait(&barrier_bounceCheck_start); // barrier to signify brick threads to start checking if bounce occurs

      // 4.3  : Get barrier to ensure bounce check completed
              
      myBarrier_wait(&barrier_bounceCheck_end); // barrier to wait for bounce check to complete...

      // 4.4  : Check global_bounceHit if > 0 go to 4.3.1... else continue

        if(global_bounceHit)
        {
            break; 
        }

    } // end of bounce check !


    /*********** 5. Ball Temp will be either at final position for the frame or where it got hit  ********/

    // 5.  : 2 Strategies : 1. update ball_send directly, 2. backward iteration to find exact location.

      // 5.1  :  -1 step and use forward (small step iteration) to find the exact ball location where it hit..

    if(global_bounceHit)
    {

        // move back by 1 step..
        global_ballBounceCheck = myBallControl_moveBall_step_backward(ballSpeed_step, global_ballBounceCheck);

        // reset bounceHit back to 0... so can find when it is the perfect hit
        global_bounceHit = 0;

        // forward (small step iteration to just nice..) to find when it just nice hit the brick/boundary
        numberOfSteps = myBallControl_getForwardSteps( ballSpeed_step, ball_send.dir);
        ballSpeed_forward = myBallControl_getForwardStepsSpeed(ballSpeed_step, numberOfSteps);

        // Repeat Step 3 and 4...


          // move from 1st step to last step to determine when the ball just hit the 
          for(i = 1 ; i <= numberOfSteps ; i++)
          {
              
            // forward steps movement
            global_ballBounceCheck = myBallControl_moveBall_forward(ballSpeed_forward, global_ballBounceCheck);
              


            /****************** 4. Check bounce hit for each steps  ****************/

            // if(barHit or outerboundary) global_bounceHit = 1; break;

            // 4.1  : Release barrier for bounce check to begin....

            myBarrier_wait(&barrier_bounceCheck_start); // barrier to signify brick threads to start checking if bounce occurs

            // 4.2  : Get barrier to ensure bounce check completed
                    
            myBarrier_wait(&barrier_bounceCheck_end); // barrier to wait for bounce check to complete...

            // 4.3  : Check global_bounceHit is 0 => ball almost hit the brick/boundary

              if(global_bounceHit)
              {
                  break; // perfect hit !
              }

          } // end of bounce check !

    }

    /*********** 6. Signal to bricks thread that bounceHit check is completed  ********/

    // bounce check completed.

    global_bounceCompleted = 1;

    // 6.1 :  barrier to signify brick threads to complete bounceCheck.
    myBarrier_wait(&barrier_bounceCheck_start); 

    // 6.2 :  Barrier to ensure every brick threads got the bounce completed signal.
    myBarrier_wait(&barrier_bounceCheck_end); 


    /*********** 7. Optimal Ball Position Found  ********/

    ball_send = global_ballBounceCheck;

    if(global_bounceHit)
    {
        // set the new direction.. (angle)
        //ball_send.dir = ??
    }


    /*********** 8. Send Ball Position  ********/

    xil_printf("Final Ball Location : %d , %d\n", ball_send.x, ball_send.y);

    if( msgsnd( msgQ_ball_id, &ball_send, sizeof(ball_msg), 0) < 0 )
    {
          // Error handling.
          print ("Error in sending message from ball thread");
    }

  }
}


void thread_func_brick(char columnNumber)
{
  brick_msg brick_send;


  unsigned char bricksLeft = 0b11111111;    // initialize with 8 bricks per column.
  unsigned char temp_BricksLeft = 0b11111111;    // initialize with 8 bricks per column.

  unsigned int  thread_score = 0;           // score for this thread.
  unsigned int  temp_thread_score = 0;           // score for this thread.


  unsigned int colour = COLOR_GREEN; // some default color.

  int msgQ_brick_id;

  msgQ_brick_id = msgget (MSGQ_ID_BRICK, IPC_CREAT); // gain access to q or create if not yet valid.


  while (bricksLeft)
  { 
    // 0. Init
    thread_score = 0; // reset thread_score accumulated for this frame.

    // 1. : Check if ball hit the brick via global_ballBounceCheck

    while(!global_bounceCompleted)
    {

	     myBarrier_wait(&barrier_bounceCheck_start); // wait for ball location to be updated and fired by ball thread...

       if(!global_bounceCompleted) // *** NOT REDUNDANT **** Dont remove me !! ensure that when bounceCompleted dont do... 
       {
          // check via global_ballBounceCheck

    	   myBoundaryChecker_CheckInner()
		 myBoundaryChecker_CheckInner(global_ballBounceCheck.x, global_ballBounceCheck.y, int myBoundary_Start_X,
				int myBoundary_Start_Y, int myBoundary_End_X, int myBoundary_End_Y) //speed????? angle???


    	    pthread_mutex_lock(&mutex_bricks);

    	    // some mutex among brick... to update  global_bounceHit !

    	    pthread_mutex_unlock(&mutex_bricks);
          // update temp bricks left;
          //temp_BricksLeft = ....

          // update temp thread score...

       }

      myBarrier_wait(&barrier_bounceCheck_end); // Signal that the bounceCheck is completed..

    }

    // bounce check completed can update what was calculate...
    bricksLeft = temp_BricksLeft;
    thread_score = temp_thread_score;



    // 1.2. Update bricks/score for this thread/column
    pthread_mutex_lock(&mutex_bricks);
    global_score += thread_score;
    pthread_mutex_unlock(&mutex_bricks);

    // Barrier to wait for score and colour to be updated here
    myBarrier_wait(&barrier_score); // wait for all bricks thread to update score.



    myBarrier_wait(&barrier_colour_start); // wait for colour resources to be available.
      // 2. Grab colour here !! GOLD !! or ??
      if(!init)
      {
      	colour = updateBrickColour(colour);
      }
   myBarrier_wait(&barrier_colour_end); // ensure that all threads ran the colour changing..

    // 3. Send color, future bricks to controller, which in turn send it to other core via mailbox

    brick_send.colour = colour;
    brick_send.bricksLeft = bricksLeft;
    brick_send.columnNumber = columnNumber; // temp...

    if( msgsnd( msgQ_brick_id, &brick_send, sizeof(brick_msg), 0) < 0 )
    {
          // Error handling.
          print ("Error in sending message from bricks thread");
    }


    // ** NOTE : AT LEAST SEND 0  BRICKS !!! **

} // end of while(1) for thread


  // implicit thread exit when bricksleft = 0....

  // 1. decrease size of the barrier.
  myBarrier_decreaseSize(&barrier_score);
  myBarrier_decreaseSize(&barrier_colour_start);
  myBarrier_decreaseSize(&barrier_colour_end);

  myBarrier_decreaseSize(&barrier_bounceCheck_start);
  myBarrier_decreaseSize(&barrier_bounceCheck_end);

  // 2. A way to notify controller thread if pthread function to check failed.

}



// Simple Description : Snatch for 2 semaphore resource, fail then colour same..
unsigned int updateBrickColour(unsigned int currentColour)
{

  sleep(rand() % MAX_RAND_SLEEP);

  if (sem_trywait(&sem_colour_yellow) == SEM_SUCCESS) {
    // resource snatched !
    return COLOR_YELLOW;
  } else {
    if (sem_trywait(&sem_colour_background) == SEM_SUCCESS) {
      // failed to snatched resource
      return COLOR_GREEN;
    } else {
      // nothing to snatch
      return currentColour;

    }

  }
}


int msgQueue_receiveBricks(int msgQ_brick_id, int colThreads, allBricks_msg *allBricks_recv)
{
  int iterator, totalBricksLeft = 0;

  for(iterator = 0 ; iterator < colThreads ; iterator++)
  {
    if( msgrcv( msgQ_brick_id, &(allBricks_recv->allMsg[iterator]), sizeof(brick_msg), 0,0 ) != sizeof(brick_msg))
    {
      return XST_FAILURE;
    }

    totalBricksLeft += allBricks_recv->allMsg[iterator].bricksLeft;

  }


  allBricks_recv->totalBricksLeft = totalBricksLeft;



  return XST_SUCCESS;
}

void changeBrickColour(int global_score, int colThreadsLeft) {
	int i, semaRelease;


	//	print("Starting Here\r\n");
	//	xil_printf("score: %d", score);
	if (global_score != 0 && global_score % 10 == 0 && global_colourFlag)
	{
		init = 0;
		global_colourFlag = 0;

		xil_printf("score is %d\n", global_score);
		//	print("inside loop liao");
		//release 2 semaphore yellow colour resources!!!

		if (colThreadsLeft > COL_YELLOW) {
			// some col need to be green
			semaRelease = colThreadsLeft - COL_YELLOW;
			for (i = 0; i < semaRelease; i++) {
				// release semaphore to change to background
				sem_post(&sem_colour_background);
			}
		}


		if (colThreadsLeft < COL_YELLOW) {
			// lesser thread than column to be yellow.. release lesser sema.
			for (i = 0; i < colThreadsLeft; i++) {
				// release semaphore to change to background

				//xil_printf("releasing in < col yellow\n");
				sem_post(&sem_colour_yellow);
			}
		} else {
			for (i = 0; i < COL_YELLOW; i++) {
				// release semaphore to change to background

				//xil_printf("releasing in > yellow\n");
				sem_post(&sem_colour_yellow);
			}
		}
	}
	else
	{
		global_colourFlag = 1;
	}
}


unsigned int myCommon_ticks_to_ms(unsigned int ticks)
{
    return (ticks * (SYSTMR_INTERVAL / SYSTMR_CLK_FREQ_KHZ));
}






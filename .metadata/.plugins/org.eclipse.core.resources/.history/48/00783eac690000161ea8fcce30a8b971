/*
 * boundaryCheck.c
 *
 *  Created on: Mar 20, 2016
 *      Author: KaiHsiang
 */

#include "myBoundaryChecker.h"
#include "myCommon.h"
#include "math.h"
#include "stdlib.h"


int outerLeftBoundary(int side_ball_X) {
	return side_ball_X <= OUTER_COL_START_X + 2;
}

int outerRightBoundary(int side_ball_X) {
	return side_ball_X >= OUTER_COL_END_X - 2;
}

int outerTopBoundary(int side_ball_Y) {
	return side_ball_Y <= OUTER_COL_START_Y + 2;
}

int outerBottomBoundary(int side_ball_Y) {
	return side_ball_Y >= OUTER_COL_END_Y - 2;
}

int outerTopLeftCorner(int side_ball_X, int side_ball_Y) {
	return (side_ball_X <= OUTER_COL_START_X + 1)
			&& (side_ball_Y <= OUTER_COL_START_Y + 1);
}

int outerTopRightCorner(int side_ball_X, int side_ball_Y) {
	return (side_ball_X >= OUTER_COL_END_X - 1)
			&& (side_ball_Y <= OUTER_COL_START_Y + 1);
}

int outerBtmLeftCorner(int side_ball_X, int side_ball_Y) {
	return (side_ball_X <= OUTER_COL_START_X + 1)
			&& (side_ball_Y >= OUTER_COL_END_Y - 1);
}

int outerBtmRightCorner(int side_ball_X, int side_ball_Y) {
	return (side_ball_X >= OUTER_COL_END_X - 1)
			&& (side_ball_Y >= OUTER_COL_END_Y - 1);
}


int myBoundaryChecker_CheckOuter(int ball_X, int ball_Y) //speed????? angle???
{
	int side_ball_X_Right = ball_X + CIRCLE_RADIUS;
	int side_ball_Y_Bottom = ball_Y + CIRCLE_RADIUS;
	int side_ball_X_Left = ball_X - CIRCLE_RADIUS;
	int side_ball_Y_Top = ball_Y - CIRCLE_RADIUS;


	/*******************************************four corners checking****************************************/

	if (outerLeftBoundary(side_ball_X_Left))
	{ // left boundary

		if (outerTopLeftCorner(side_ball_X_Left, side_ball_Y_Top))
		{
			// left and top boundary
			return HIT_OUTER_CORNER; // return 11
		}
		else if (outerBtmLeftCorner(side_ball_X_Left, side_ball_Y_Bottom))
		{
			// left and bottom boundary
			return HIT_OUTER_BOX_BTM; // return 99
		}
		else
		{
			return HIT_OUTER_BOX_SIDE; // return 10
		}
	}
	else if (outerRightBoundary(side_ball_X_Right))
	{
		// right
		if (outerTopRightCorner(side_ball_X_Right, side_ball_Y_Top))
		{
			// top right
			return HIT_OUTER_CORNER; // return 11
		}
		else if (outerBtmRightCorner(side_ball_X_Right, side_ball_Y_Bottom))
		{
			// bottom right
			return HIT_OUTER_BOX_BTM; // return 99
		}
		else
		{
			return HIT_OUTER_BOX_SIDE; // return 10
		}
	}
	else if (outerTopBoundary(side_ball_Y_Top))
	{
		// top boundary
		if (outerTopLeftCorner(side_ball_X_Left, side_ball_Y_Top))
		{
			// left and top boundary
			return HIT_OUTER_CORNER; // return 11
		}
		else if (outerTopRightCorner(side_ball_X_Right, side_ball_Y_Top))
		{
			// top right
			return HIT_OUTER_CORNER; // return 11
		}
		else
		{
			return HIT_OUTER_BOX_TOP; // return 10
		}
	}
	else if(outerBottomBoundary(side_ball_Y_Bottom))
	{ // bottom boundary
		return HIT_OUTER_BOX_BTM;		// return 99
	}
	else
	{
		return 0;
	}
}

int leftTopBoundaryCheck(int side_ball_X, int myBoundary_Start_X,
		int side_ball_Y, int myBoundary_Start_Y) {
	return (side_ball_X >= myBoundary_Start_X)
			&& (side_ball_Y >= myBoundary_Start_Y)
			&& (side_ball_X <= myBoundary_Start_X + CIRCLE_RADIUS)
			&& (side_ball_Y <= myBoundary_Start_Y + CIRCLE_RADIUS);
}

int innerBoundaryCheck(int side_ball_X, int myBoundary_Start_X,
		int myBoundary_End_X, int side_ball_Y, int myBoundary_Start_Y,
		int myBoundary_End_Y) {
	return (side_ball_X >= myBoundary_Start_X)
			&& (side_ball_X <= myBoundary_End_X)
			&& (side_ball_Y >= myBoundary_Start_Y)
			&& (side_ball_Y <= myBoundary_End_Y);
}

int innerBarCheck(int side_ball_X, int myBoundary_Start_X,
		int myBoundary_End_X, int side_ball_Y, int myBoundary_Start_Y,
		int myBoundary_End_Y) {
	return (side_ball_X >= (myBoundary_Start_X - 1))
			&& (side_ball_X <= (myBoundary_End_X + 1))
			&& (side_ball_Y >= (myBoundary_Start_Y - 1));
}

int rightTopBoundaryCheck(int side_ball_X, int myBoundary_End_X,
		int side_ball_Y, int myBoundary_Start_Y) {
	return (side_ball_X <= myBoundary_End_X)
			&& (side_ball_Y >= myBoundary_Start_Y)
			&& (side_ball_X >= (myBoundary_End_X - CIRCLE_RADIUS))
			&& (side_ball_Y <= (myBoundary_Start_Y + CIRCLE_RADIUS));
}

int leftBottomBoundaryCheck(int side_ball_X, int myBoundary_Start_X,
		int side_ball_Y, int myBoundary_End_Y) {
	return (side_ball_X <= myBoundary_Start_X)
			&& (side_ball_Y <= myBoundary_End_Y)
			&& (side_ball_X >= myBoundary_Start_X + CIRCLE_RADIUS)
			&& (side_ball_Y >= myBoundary_End_Y - CIRCLE_RADIUS);
}

int rightBottomBoundaryCheck(int side_ball_X, int myBoundary_End_X,
		int side_ball_Y, int myBoundary_End_Y) {
	return (side_ball_X <= myBoundary_End_X)
			&& (side_ball_Y <= myBoundary_End_Y)
			&& (side_ball_X >= myBoundary_End_X - CIRCLE_RADIUS)
			&& (side_ball_Y >= myBoundary_End_Y - CIRCLE_RADIUS);
}

int innerLeftBoundary(int side_ball_X, int myBoundary_Start_X) {
	return side_ball_X <= myBoundary_Start_X;
}

int innerRightBoundary(int side_ball_X, int myBoundary_End_X) {
	return side_ball_X >= myBoundary_End_X;
}

int innerTopBoundary(int side_ball_Y, int myBoundary_Start_Y) {
	return side_ball_Y <= myBoundary_Start_Y;
}

int innerBottomBoundary(int side_ball_Y, int myBoundary_End_Y) {
	return side_ball_Y >= myBoundary_End_Y;
}

int myBoundaryChecker_getClosestX(int ball_X, int myBoundary_Start_X, int myBoundary_End_X)
{
	if (ball_X  < myBoundary_Start_X)
	{
		return  myBoundary_Start_X;
	}
	else if (ball_X  > myBoundary_End_X)
	{
		return myBoundary_End_X;
	}
	else
	{
		return ball_X;
	}
}


int myBoundaryChecker_getClosestY(int ball_Y, int myBoundary_Start_Y, int myBoundary_End_Y)
{
	if (ball_Y  < myBoundary_Start_Y)
	{
		return  myBoundary_Start_Y;
	}
	else if (ball_Y  > myBoundary_End_Y)
	{
		return myBoundary_End_Y;
	}
	else
	{
		return ball_Y;
	}
}

int myBoundaryChecker_getDistanceBtwThem(int dist_X, int dist_Y)
{

	// use pythagoras to find distance. square distance !

	float distanceBtwThem = sqrt(  ((float)(dist_X * dist_X))  + (dist_Y * dist_Y));


	return (int)distanceBtwThem; // rnd down distance.

}


int myBoundaryChecker_getDistance_Y(int ball_Y, int myBoundary_Start_Y, int myBoundary_End_Y)
{
	int dist_end_y = abs(ball_Y - myBoundary_End_Y);
	int dist_start_y = abs(ball_Y - myBoundary_Start_Y);

	if(dist_start_y < dist_end_y)
	{
		return dist_start_y;
	}
	else
	{
		return dist_end_y;
	}
}

int myBoundaryChecker_getDistance_X(int ball_X, int myBoundary_Start_X, int myBoundary_End_X)
{
	int dist_end_x = abs(ball_X - myBoundary_End_X);
	int dist_start_x = abs(ball_X - myBoundary_Start_X);

	if(dist_start_x < dist_start_x)
	{
		return dist_start_x;
	}
	else
	{
		return dist_end_x;
	}
}

// return the side that it HIT!, if 
int myBoundaryChecker_checkHitBrick(int ball_X, int ball_Y, int myBoundary_Start_X, int myBoundary_Start_Y, int myBoundary_End_X, int myBoundary_End_Y)
{

	static int prev_dist_X = 0, prev_dist_Y = 0;

	int closest_X, closest_Y;
	int dist_X, dist_Y, distanceBtwThem; 

	int ret = 0;


	// get closest point btw them. 
	closest_X = myBoundaryChecker_getClosestX(ball_X, myBoundary_Start_X, myBoundary_End_X);
	closest_Y = myBoundaryChecker_getClosestY(ball_Y, myBoundary_Start_Y, myBoundary_End_Y);

	dist_X =  abs(ball_X - closest_X);
	dist_Y =  abs(ball_Y - closest_Y);


	// get (dist btw brick and ball)
	distanceBtwThem = myBoundaryChecker_getDistanceBtwThem(dist_X, dist_Y);

	if (distanceBtwThem < CIRCLE_RADIUS)
	{
		// collided into brick...
		xil_printf("Dist : %d\n", distanceBtwThem);

		if(distanceBtwThem > (CIRCLE_RADIUS - CORNER_TOLERANCE))
		{
			// distance between brick and ball is very near... likely to be corner
			// NOTE : Why cannot be ball inside brick and near..?
			// NOTE : How do u confirm!?!? => Small steps algorithm... 

			xil_printf("Hit Corner\n");

			ret = HIT_INNER_CORNER; // return 11
		}
		else
		{

			if(dist_X == 0 && dist_Y == 0)
			{
				xil_printf("why and i here, prev_dist_X : %d, prev_dist_Y :%d\n",prev_dist_X, prev_dist_Y);


				if(prev_dist_X == 0 && prev_dist_Y == 0)
				{

					xil_printf("GG!\n");
					ret = HIT_INNER_BOX_BTM;

				}
				else if(prev_dist_X == 0)
				{

					xil_printf("reflect BTM using prev_dist_X = 0\n");
					ret = HIT_INNER_BOX_BTM;
				}
				else if (prev_dist_Y == 0)
				{

					xil_printf("reflect SIDE using prev_dist_Y = 0\n");

					ret = HIT_INNER_BOX_SIDE;
				}
				else if(prev_dist_X < prev_dist_Y)
				{
					// distance for x is closer...
					xil_printf("reflect SIDE using PREV_X < Y\n\n");

					ret = HIT_INNER_BOX_SIDE;
				}
				else
				{
					// distance for y is closer... either btm or top .. no difference
					xil_printf("reflect BTM using PREV_Y < X\n\n");

					ret = HIT_INNER_BOX_BTM;
				}

			}
			else if (dist_X == 0)
			{
				//  ball  inside x boundary
				xil_printf("reflect BTM using dist_x = 0\n");

				ret = HIT_INNER_BOX_BTM;
			}
			else if(dist_Y == 0)
			{
				// ball inside y boundary
//				xil_printf("so near to y boundary\n");
				xil_printf("reflect SIDE using dist_y = 0 is\n\n");

				ret = HIT_INNER_BOX_SIDE;
			}
			else if(dist_X < dist_Y)
			{
//				xil_printf("dist x < y \n");
				// distance for x is closer...
				xil_printf("reflect SIDE using X < Y\n\n");

				ret = HIT_INNER_BOX_SIDE;
			}
			else
			{
				// distance for y is closer... either btm or top .. no difference
//				xil_printf("dist y < x \n");
				xil_printf("reflect BTM using Y < X\n\n");

				ret = HIT_INNER_BOX_BTM;
			}

		}
	}
	else
	{
		ret = 0;
	}

	prev_dist_X = dist_X;
	prev_dist_Y = dist_Y;

	xil_printf("returning ret : %d\n", ret);

	return ret;

}


// return 1 if x axis is within the brick side boundary
// Return 0 if not...
int myBoundaryChecker_checkBrick_horizontal(int ball_X, int myBoundary_Start_X, int myBoundary_End_X)
{
	int side_ball_X_Right = ball_X + CIRCLE_RADIUS + 1;
	int side_ball_X_Left = ball_X - CIRCLE_RADIUS - 1;


	if((side_ball_X_Right >= myBoundary_Start_X) &&  (side_ball_X_Right <= myBoundary_End_X))
	{
		// right of ball x inside boundary
		return 1;
	}

	else if((side_ball_X_Left >= myBoundary_Start_X) &&  (side_ball_X_Left <= myBoundary_End_X))
	{
		// left of ball x inside boundary
		return 1;
	}

	else
	{

		return 0;
	}

}


int myBoundaryChecker_checkBrick_vertical(int ball_Y, int myBoundary_Start_Y, int myBoundary_End_Y)
{
	int side_ball_Y_Top = ball_Y - CIRCLE_RADIUS - 1;
	int side_ball_Y_Bottom = ball_Y + CIRCLE_RADIUS + 1;


	if((side_ball_Y_Top >= myBoundary_Start_Y) &&  (side_ball_Y_Top <= myBoundary_End_Y))
	{
		// top of ball y inside boundary
		return 1;
	}

	else if((side_ball_Y_Bottom >= myBoundary_Start_Y) &&  (side_ball_Y_Bottom <= myBoundary_End_Y))
	{
		// btm of ball y inside boundary
		return 1;
	}

	else
	{

		return 0;
	}

}


int myBoundaryChecker_checkLastBrick_vertical(int ball_Y, int myBoundary_End_Y)
{
	int side_ball_Y_Top = ball_Y - CIRCLE_RADIUS - 1;


	if( (side_ball_Y_Top <= myBoundary_End_Y))
	{
		// top of ball y inside boundary
		return 1;
	}

	else
	{

		return 0;
	}

}





//
//int myBoundaryChecker_CheckInner(int ball_X, int ball_Y, int myBoundary_Start_X,
//		int myBoundary_Start_Y, int myBoundary_End_X, int myBoundary_End_Y) //speed????? angle???
//{
//	int side_ball_X_Right = ball_X + CIRCLE_RADIUS;
//	int side_ball_Y_Bottom = ball_Y + CIRCLE_RADIUS;
//	int side_ball_X_Left = ball_X - CIRCLE_RADIUS;
//	int side_ball_Y_Top = ball_Y - CIRCLE_RADIUS;
//
//	int side_ball_X = 0;
//	int side_ball_Y = 0;
//
//	int quad_x[] = {side_ball_X_Left, side_ball_X_Left, side_ball_X_Right, side_ball_X_Right};
//	int quad_y[] = {side_ball_Y_Top, side_ball_Y_Bottom, side_ball_Y_Top, side_ball_Y_Bottom};
//	int i =0;
//	//	xil_printf("bound_x_start : %d, bound_ystart : %d\n bound_x_end : %d, bound_yend : %d\n", myBoundary_Start_X, myBoundary_Start_Y, myBoundary_End_X, myBoundary_End_Y);
//
//	for(i = 0; i < 4; i++)
//	{
//		side_ball_X = quad_x[i];
//		side_ball_Y = quad_y[i];
//
//
//
//		//	}
//
//		/*******************************************four corners checking****************************************/
//		// left and top boundary
//		if (leftTopBoundaryCheck(side_ball_X, myBoundary_Start_X, side_ball_Y,
//				myBoundary_Start_Y)) {
//
//			//side_ball_X = myBoundary_Start_X;
//			//side_ball_Y = myBoundary_Start_Y;
//			return HIT_INNER_CORNER; // return 11
//		}
//
//		// right and top boundary
//		else if (rightTopBoundaryCheck(side_ball_X, myBoundary_End_X, side_ball_Y,
//				myBoundary_Start_Y)) {
//			//side_ball_X = myBoundary_End_X;
//			//side_ball_Y = myBoundary_Start_Y;
//
//			//xil_printf("sideball : %d,%d , bound_x_start : %d, bound_ystart : %d\n bound_x_end : %d, bound_yend : %d\n", side_ball_X, side_ball_Y, myBoundary_Start_X, myBoundary_Start_Y, myBoundary_End_X, myBoundary_End_Y);
//
//			return HIT_INNER_CORNER; // return 11
//		}
//		// left and bottom boundary
//		else if (leftBottomBoundaryCheck(side_ball_X, myBoundary_Start_X,
//				side_ball_Y, myBoundary_End_Y)) {
//			//side_ball_X = myBoundary_Start_X;
//			//side_ball_Y = myBoundary_End_Y;
//			return HIT_INNER_CORNER; // return 11
//		}
//		// right and bottom boundary
//		else if (rightBottomBoundaryCheck(side_ball_X, myBoundary_End_X,
//				side_ball_Y, myBoundary_End_Y)) {
//			//side_ball_X = myBoundary_End_X;
//			//side_ball_Y = myBoundary_End_Y;
//			return HIT_INNER_CORNER; // return 11
//		}
//		else if (innerBoundaryCheck(side_ball_X, myBoundary_Start_X, myBoundary_End_X,
//				side_ball_Y, myBoundary_Start_Y, myBoundary_End_Y)) { // left boundary
//			//side_ball_X = myBoundary_Start_X;
//			if( innerLeftBoundary(side_ball_X, myBoundary_Start_X)) {
//				return HIT_INNER_BOX_SIDE;
//			}
//
//			if( innerRightBoundary(side_ball_X, myBoundary_End_X)) {
//				return HIT_INNER_BOX_SIDE;
//			}
//
//			if(innerTopBoundary(side_ball_Y, myBoundary_Start_Y)) {
//				return HIT_INNER_BOX_TOP;
//			}
//
//			if(innerBottomBoundary(side_ball_Y, myBoundary_End_Y)) {
//				return HIT_INNER_BOX_BTM;
//			}
//
//		}
//	}
//	return 0;
//}



// return 1 if x axis is within the brick side boundary
// Return 0 if not...
int myBoundaryChecker_checkHitBar_horizontal(int ball_X, int myBoundary_Start_X, int myBoundary_End_X)
{
	int side_ball_X_Right = ball_X + CIRCLE_RADIUS + 1;
	int side_ball_X_Left = ball_X - CIRCLE_RADIUS - 1;


	if((side_ball_X_Right >= myBoundary_Start_X) &&  (side_ball_X_Right <= myBoundary_End_X))
	{
		// right of ball x inside boundary
		return 1;
	}

	else if((side_ball_X_Left >= myBoundary_Start_X) &&  (side_ball_X_Left <= myBoundary_End_X))
	{
		// left of ball x inside boundary
		return 1;
	}

	else
	{

		return 0;
	}

}



// NO END Y cause... impossible to be below.. => below = lose game..
int myBoundaryChecker_checkBar_vertical(int ball_Y, int myBoundary_Start_Y)
{
	// check btm is enough..

	int side_ball_Y_Bottom = ball_Y + CIRCLE_RADIUS + 1;


	if((side_ball_Y_Bottom >= myBoundary_Start_Y))
	{
		// btm of ball y inside boundary
		return 1;
	}

	else
	{

		return 0;
	}

}




int myBoundaryChecker_checkHitBar(int ball_X, int ball_Y, int myBoundary_Start_X,
		int myBoundary_Start_Y, int myBoundary_End_X, int myBoundary_End_Y)
{

	int closest_X, closest_Y;
	int dist_X, dist_Y, distanceBtwThem; 

	if(myBoundaryChecker_checkHitBar_horizontal( ball_X, myBoundary_Start_X, myBoundary_End_X))
	{
		// if ball at the x boundary of bar.. continue to confirm...

		if(myBoundaryChecker_checkBar_vertical (ball_Y, myBoundary_Start_Y))
		{
			// ball is both at x and y boundary... using square box check..
			// use distance to check if it's really hitting bar..

			closest_X = myBoundaryChecker_getClosestX( ball_X,  myBoundary_Start_X,  myBoundary_End_X);
			closest_Y = myBoundary_Start_Y; // using start Y only...


			dist_X =  abs(ball_X - closest_X);
			dist_Y =  abs(ball_Y - closest_Y);

			// get (dist btw brick and ball)
			distanceBtwThem = myBoundaryChecker_getDistanceBtwThem(dist_X, dist_Y);

			if (distanceBtwThem < (CIRCLE_RADIUS))
			{
				// collided into bar...

				if(ball_X <= (myBoundary_Start_X + REGION_A_NEG))
				{
					// A- REGION : from LHS to end of A- region
					return HIT_ANGLE_DEC; // return 14

				}
				else if(ball_X <= (myBoundary_Start_X + REGION_S_NEG))
				{
					// S- REGION : from end of A- to end of S- region
					return HIT_SPEED_DEC; // return 14

				}
				else if(ball_X <= (myBoundary_Start_X + REGION_N))
				{
					// N REGION : from end of S- to end of N region

					return HIT_BAR_N; // return 11


				}
				else if(ball_X <= (myBoundary_Start_X + REGION_S_POS))
				{
					// S+ REGION: from end of N to end of S+ region
					return HIT_SPEED_ACC; // return 13

				}
				else
				{
					// N+ REGION : from end of S+ region to RHS
					return HIT_ANGLE_ACC; // return 13

				}

			}

		}

	}

	return 0; // fail to hit any..


}

int myBoundaryChecker_CheckBar(int ball_X, int ball_Y, int myBoundary_Start_X,
		int myBoundary_Start_Y, int myBoundary_End_X, int myBoundary_End_Y) //speed????? angle???
{
	int side_ball_X_Right = ball_X + CIRCLE_RADIUS;
	int side_ball_Y_Bottom = ball_Y + CIRCLE_RADIUS;
	int side_ball_X_Left = ball_X - CIRCLE_RADIUS;
	int side_ball_Y_Top = ball_Y - CIRCLE_RADIUS;

	int side_ball_X = 0;
	int side_ball_Y = 0;

	int quad_x[] = {side_ball_X_Left, side_ball_X_Left, side_ball_X_Right, side_ball_X_Right};
	int quad_y[] = {side_ball_Y_Top, side_ball_Y_Bottom, side_ball_Y_Top, side_ball_Y_Bottom};

	int i =0;
	//	xil_printf("bound_x_start : %d, bound_ystart : %d\n bound_x_end : %d, bound_yend : %d\n", myBoundary_Start_X, myBoundary_Start_Y, myBoundary_End_X, myBoundary_End_Y);

	for(i = 0; i < 4; i++)
	{
		side_ball_X = quad_x[i];
		side_ball_Y = quad_y[i];




		// Region N
		if (innerBarCheck(side_ball_X, (myBoundary_Start_X + 20), (myBoundary_End_X - 20),
				side_ball_Y, myBoundary_Start_Y, myBoundary_End_Y)) { 
			return HIT_BAR_N; // return 11
		}
		// Region S - 
		else if (innerBarCheck(side_ball_X, (myBoundary_Start_X + 10), (myBoundary_Start_X + 20),
				side_ball_Y, myBoundary_Start_Y, myBoundary_End_Y)) { 
			xil_printf("S- : x : %d, y : %d\n\n\n\n", ball_X, side_ball_Y_Bottom);
			return HIT_SPEED_DEC; // return 12
		}
		// Region S+
		else if (innerBarCheck(side_ball_X, (myBoundary_End_X - 20), (myBoundary_End_X - 10),
				side_ball_Y, myBoundary_Start_Y, myBoundary_End_Y)) { 
			xil_printf("S+ : x : %d, y : %d\n\n\n\n", ball_X, side_ball_Y_Bottom);
			return HIT_SPEED_ACC; // return 13
		}
		// Region  A-
		else if (innerBarCheck(side_ball_X, myBoundary_Start_X, (myBoundary_Start_X + 10),
				side_ball_Y, myBoundary_Start_Y, myBoundary_End_Y)) {
			xil_printf("A-  : x : %d, y : %d\n\n\n\n", ball_X, side_ball_Y_Bottom);
			return HIT_ANGLE_DEC; // return 14
		}
		// Region A+
		else if (innerBarCheck(side_ball_X, (myBoundary_End_X - 10), myBoundary_End_X,
				side_ball_Y, myBoundary_Start_Y, myBoundary_End_Y)) {
			xil_printf("A+ : x : %d, y : %d\n\n\n\n", ball_X, side_ball_Y_Bottom);
			return HIT_ANGLE_ACC; // return 15
		}
	}
	return 0;
}
